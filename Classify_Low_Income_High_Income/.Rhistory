count(d[1:97])
length(hike)
d=c(1:2500)
d=seq(1,2500,6)
c=d[seq(1,50,1)]
d[seq(1,50,1)]
subset(d,d%%2==0,select=d)
f=subset(d,d%%2==0,select=d)
f
x=d%%2
d=seq(1,2500,5)
x=d%%2
k=d[x==0]
d=seq(1,2500,5);seq(1,2500,5)
d=(seq(1,2500,5);seq(1,2500,5))
d=(seq(40,400,9)
x=d%%2
k=d[x==0]
x=d%%2||d%%3
d=(seq(40,400,9)
x=d%%2||d%%3
k=d[x==0]
d=(seq(40,400,9)
x=d%%2||d%%3
k=d[x==0]
x=d%%2||d%%3
k=d[x==0]
d=seq(40,400,9)
x=d%%2||d%%3
k=d[x==0]
k=d[x==1]
x=d%%2||d%%3
x
k=d[x==1||y==1]
d=seq(40,400,9)
x=d%%2
y=d%%3
k=d[x==1||y==1]
k=d[x==0||y==0]
d=seq(40,400,9)
x=d%%2
y=d%%3
k=d[x==0||y==0]
d=seq(40,400,8)
x=d%%2
y=d%%3
k=d[x==0||y==0]
k=d[x==0&&y==0]
d=seq(40,400,8)
x=d%%2
y=d%%3
k=d[x==0&&y==0]
d=matrix(C(1:20),nrow = 5,ncol = 6)
d=matrix(C(1:20),nrow = 5,ncol = 4)
d=matrix(c(1:20),nrow = 5,ncol = 4)
d
d=matrix(c(1:20),nrow = 5,ncol = 4,byrow = T)
d
d=matrix(c(1:20),nrow = 5,ncol = 0,byrow = T)
d=matrix(c(1:20),nrow = 5,ncol = 10,byrow = T)
d
d[1,5]
d[1,5;2,5]
d[1,]
d[c(1,4,5,10),c(2,3,4,10)]
d[c(1,4,5,10),c(2,3,4,5)]
d[c(1,4,5,5),c(2,3,4,5)]
d=matrix(c(1:1000),nrow = 100,ncol = 10,byrow = T)
d=matrix(c(1:1000),nrow = 100,ncol = 10,byrow = T)
d[c(seq(1,100,2)),1:5]
k=c(1:100%%2!=0)
d[c(k,1:5]
d[k,1:5]
d=c(3,4,5)
k=(1,2,3,4,5,6)
d+k
k=c(1,2,3,4,5,6)
d+k
d=c(3,4,5,7)
k=c(1,2,3,4,5,6)
d+k
d*k
k*d
d>k
k>d
s=matrix(21:40,nrow=10,ncol=2)
x=cbind(d,c)
y=cbind(s,x)
View(x)
d=1:10
c=11:20
s=matrix(21:40,nrow=10,ncol=2)
x=cbind(d,c)
y=cbind(s,x)
View(y)
View(y)
View(s)
View(s)
z=rbind(s,x)
View(z)
View(z)
s=matrix(21:40,nrow=2,ncol=10)
x=cbind(d,c)
y=cbind(s,x)
z=rbind(s,x)
s=matrix(21:40,nrow=10,ncol=2)
x=cbind(d,c)
y=cbind(s,x())
z=rbind(s,x)
d=matrix(20:399,nrow=20,ncol=19)
c=d%%5==0
y=d(c)
y=subset.matrix(d,d(,),select=TRUE)
y=subset.matrix(d,d(1:20,19),select=TRUE)
y=subset.matrix(d,d(1:20,1:19),select=TRUE)
y=subset.matrix(d,d[1:20,1:19],select=TRUE)
y=subset.matrix(d,d%%5==0,select=TRUE)
y=d[c]]
y=d[c]
y=d[c(1,3,5,7),]
z=d[,c(2,5,6)]
View(y)
View(y)
y=d[c(1,3,5,7),]
z=d[,c(2,5,6)]
View(y)
View(y)
View(z)
View(z)
y=d[c(1,3,5,7),c(2,5,6)]
View(y)
View(y)
help subset()
s=list(TRUE,matrix(1:6,nrow=2,ncol=3),20:200,"The Dark Knight" )
list[3]
s[3]
S[3[6]]
s[3[6]]
s[1[6]]
s[[1]]
s[1]
s[[1]]
s[1]
s[1]
s=list("a"=TRUE,"b"=matrix(1:6,nrow=2,ncol=3),"c"=20:200,"d"=The Dark Knight" )
s[1]
# s[[1]]
s[1]
s=list("a"=TRUE,"b"=matrix(1:6,nrow=2,ncol=3),"c"=20:200,"d"=The Dark Knight" )
s[1]
# s[[1]]
s=list("a"=TRUE,"b"=matrix(1:6,nrow=2,ncol=3),"c"=20:200,"d"=The Dark Knight" )
s[1]
s=list("a"=TRUE,"b"=matrix(1:6,nrow=2,ncol=3),"c"=20:200,"d"=The Dark Knight" )
s[1]
s=list("a"=TRUE,"b"=matrix(1:6,nrow=2,ncol=3),"c"=20:200,"d"="The Dark Knight" )
s[1]
s["a"]
s[[3[2]]]
s[[3]][2]
d1=1:10
d2=11:20
d3=21:30
d4=31:40
a=c("a","b","c")
d1=1:3
s=data.frame(a,d1)
colnames(s)=("name","age")
colnames(s)=C(name,age)
colnames(s)=c(name,age)
colnames(s)=c("name","age")
colnames(s)
s
d1=1:50
d2=11:20
colnames(s)=c("Column1","Column2")
s
d1=1:50
d2=51:100
d3=21:30
d4=31:40
a=c("a","b","c")
s=data.frame(d2,d1)
colnames(s)=c("Column1","Column2")
s
s=data.frame(d2,d1)
s
data = c(1,2,2,3,1,2,3,3,1,2,3,3,1)
fdata=factor(data,levels = c("a","b","c"))
fdata
table(fdata)
fdata=factor(data,levels = c(1,2,3))
fdata
table(fdata)
x=1,2
x=1
x=c(1,2,3)
x=c(1,2,3,c(1,2,3))
x[3]
x[4]
rm(list=ls(all.names = T))
library(vegan)
library(ada)
library(caret)
attr = c('id', 'age', 'exp', 'inc', 'zip', 'family',
'ccavg', 'edu', 'mortgage', 'loan',
'securities', 'cd', 'online', 'cc')
read.csv('C:/Users/Aerow/Desktop/20180610_Batch42_CSE7305c_Lab06_xgboost_adaboost_stacking/20180610_Batch42_CSE7305c_Lab06_Adaboost/UniversalBank.csv',header = T,col.names = attr)
data=read.csv('C:/Users/Aerow/Desktop/20180610_Batch42_CSE7305c_Lab06_xgboost_adaboost_stacking/20180610_Batch42_CSE7305c_Lab06_Adaboost/UniversalBank.csv',header = T,col.names = attr)
dro_Attr=c('id','zip','exp')
attr=setdiff(attr,drop_Attr)
attr=setdiff(attr,drop_Attr)
attr=setdiff(attr,dro_Attr)
data=[,attr]
data=data[,attr]
attr = c('id', 'age', 'exp', 'inc', 'zip', 'family',
'ccavg', 'edu', 'mortgage', 'loan',
'securities', 'cd', 'online', 'cc')
all.equal(attr,dro_Attr)
dro_Attr=c('id','zip','exp')
attr=setdiff(attr,dro_Attr)
data=data[,attr]
all.equal(attr,dro_Attr)
data1=read.csv('C:/Users/Aerow/Desktop/20180610_Batch42_CSE7305c_Lab06_xgboost_adaboost_stacking/20180610_Batch42_CSE7305c_Lab06_Adaboost/UniversalBank.csv',header = T,col.names = attr)
attr = c('id', 'age', 'exp', 'inc', 'zip', 'family',
'ccavg', 'edu', 'mortgage', 'loan',
'securities', 'cd', 'online', 'cc')
data1=read.csv('C:/Users/Aerow/Desktop/20180610_Batch42_CSE7305c_Lab06_xgboost_adaboost_stacking/20180610_Batch42_CSE7305c_Lab06_Adaboost/UniversalBank.csv',header = T,col.names = attr)
all.equal(data,data1)
all_equal(data,data1)
library(dplyr)
allequal(data,data1)
all_equal(data,data1)
boxplot(exp~loan,data= data)
boxplot(exp~loan,data= data1)
cat_Attr = c("family", "edu", "securities", "cd", "online", "cc", "loan")
num_Attr = setdiff(attr, cat_Attr)
cat_Data <- data.frame(sapply(data[,cat_Attr], as.factor))
num_Data <- data.frame(sapply(data[,num_Attr], as.numeric))
num_Attr = setdiff(attr, cat_Attr)
num_Data <- data.frame(sapply(data[,num_Attr], as.numeric))
dro_Attr=c('id','zip','exp')
attr=setdiff(attr,dro_Attr)
data=data[,attr]
cat_Attr = c("family", "edu", "securities", "cd", "online", "cc", "loan")
num_Attr = setdiff(attr, cat_Attr)
cat_Data <- data.frame(sapply(data[,cat_Attr], as.factor))
num_Data <- data.frame(sapply(data[,num_Attr], as.numeric))
data = cbind(num_Data, cat_Data)
rm(cat_Data, num_Data)
knitr::opts_chunk$set(echo = TRUE)
attr = c('id', 'age', 'exp', 'inc', 'zip', 'family',
'ccavg', 'edu', 'mortgage', 'loan',
'securities', 'cd', 'online', 'cc')
data = read.csv(file = "UniversalBank.csv", header = TRUE, col.names = attr)
str(data)
drop_Attr = c("id", "zip", "exp")
attr = setdiff(attr, drop_Attr)
data = data[, attr]
cat_Attr = c("family", "edu", "securities", "cd", "online", "cc", "loan")
num_Attr = setdiff(attr, cat_Attr)
cat_Data <- data.frame(sapply(data[,cat_Attr], as.factor))
num_Data <- data.frame(sapply(data[,num_Attr], as.numeric))
data = cbind(num_Data, cat_Data)
numeric_data <- data.frame(model.matrix(data$loan~.,data))
numeric_data <- numeric_data[,-1]
str(numeric_data)
cla_Data = decostand(numeric_data, "range")
cla_Data = cbind(cla_Data, loan=data[,"loan"])
set.seed(123)
train_RowIDs = createDataPartition(cla_Data$loan, p = 0.6, list = FALSE)
train_Data = cla_Data[train_RowIDs,]
test_Data = cla_Data[-train_RowIDs,]
table(cla_Data$loan)
table(train_Data$loan)
table(test_Data$loan)
table(train_Data$loan)
table(test_Data$loan)
table(train_Data$loan)
model = ada(x = train_Data_wo_target,
y = train_Data$loan,
iter=50, loss="exponential", type= "discrete", nu= 0.4)
colnames(train_Data)
train_Data_wo_target <- train_Data[,-which(names(train_Data) %in% c("loan"))]
test_Data_wo_target <- test_Data[,-which(names(train_Data) %in% c("loan"))]
model = ada(x = train_Data_wo_target,
y = train_Data$loan,
iter=50, loss="exponential", type= "discrete", nu= 0.4)
cm_Train = table(train_Data$loan, pred_Train)
accu_Train= sum(diag(cm_Train))/sum(cm_Train)
pred_Train  =  predict(model, train_Data_wo_target)
cat("Accuracy on the training data:", accu_Train)
cm_Train = table(train_Data$loan, pred_Train)
accu_Train= sum(diag(cm_Train))/sum(cm_Train)
cm_Train
rm(list=ls(all.names=T))
setwd(C:/Users/Aerow/Desktop/20180610_Batch42_CSE7305c_Lab06_xgboost_adaboost_stacking/20180610_Batch42_CSE7305c_Lab06_Adaboost)
setwd('C:/Users/Aerow/Desktop/20180610_Batch42_CSE7305c_Lab06_xgboost_adaboost_stacking/20180610_Batch42_CSE7305c_Lab06_Adaboost')
gamma_data <- read.csv("gamma_data.csv")
gamma_data$classlabel <- ifelse(gamma_data$class == 0, "g", "h")
library(caret)
set.seed(1234)
index_train <- createDataPartition(gamma_data$class, p = 0.7, list = F)
pre_train <- gamma_data[index_train, ]
pre_test <- gamma_data[-index_train, ]
std_method <- preProcess(pre_train[, !(names(pre_train) %in% "class")], method = c("center", "scale"))
train_data <- predict(std_method, pre_train)
test_data <- predict(std_method, pre_test)
library(xgboost)
train_matrix <- xgb.DMatrix(data = as.matrix(train_data[, !(names(train_data) %in% c("class", "classlabel"))]),
label = as.matrix(train_data[, names(train_data) %in% "class"]))
install.packages('xgboost')
install.packages('xgboost')
library(xgboost)
test_matrix <- xgb.DMatrix(data = as.matrix(test_data[, !(names(test_data) %in% c("class", "classlabel"))]),
label = as.matrix(test_data[, names(test_data) %in% "class"]))
xgb_model_basic <- xgboost(data = train_matrix, max.depth = 2, eta = 1, nthread = 2, nround = 300, objective = "binary:logistic", verbose = 1, early_stopping_rounds = 10)
xgb.save(xgb_model_basic, "xgb_model_basic")
rm(xgb_model_basic)
xgb_model_basic <- xgboost(data = train_matrix, max.depth = 2, eta = 1, nthread = 2, nround = 300, objective = "binary:logistic", verbose = 1, early_stopping_rounds = 10)
xgb_model_basic <- xgboost(data = train_matrix, max.depth = 2, eta = 1, nthread = 2, nround = 300, objective = "binary:logistic", verbose = 1, early_stopping_rounds = 10)
train_matrix <- xgb.DMatrix(data = as.matrix(train_data[, !(names(train_data) %in% c("class", "classlabel"))]),
label = as.matrix(train_data[, names(train_data) %in% "class"]))
xgb_model_basic <- xgboost(data = train_matrix, max.depth = 2, eta = 1, nthread = 2, nround = 300, objective = "binary:logistic", verbose = 1, early_stopping_rounds = 10)
xgb.save(xgb_model_basic, "xgb_model_basic")
xgb_model_basic <- xgb.load("xgb_model_basic")
basic_preds <- predict(xgb_model_basic, test_matrix)
basic_preds_labels <- ifelse(basic_preds < 0.5, 0, 1)
confusionMatrix(basic_preds_labels, test_data$class)
basic_preds <- predict(xgb_model_basic, test_matrix)
basic_preds_labels <- ifelse(basic_preds < 0.5, 0, 1)
confusionMatrix(basic_preds_labels, test_data$class)
xgb_model_basic <- xgb.load("xgb_model_basic")
basic_preds <- predict(xgb_model_basic, test_matrix)
basic_preds_labels <- ifelse(basic_preds < 0.5, 0, 1)
confusionMatrix(basic_preds_labels, test_data$class)
confusionMatrix(basic_preds, test_data$class)
setwd('C:/Users/Aerow/Desktop')
library(randomForest)
train_data<-read.csv('train
_data_cleaned.csv')
train_data<-read.csv('train_data_cleaned.csv')
setwd('C:/Users/Aerow/Desktop/Cute-3')
train_data<-read.csv('train_data_cleaned.csv')
rm(list=ls(all.names = T))
train_data<-read.csv('train_data_cleaned.csv')
colSums(is.na(train_data))
train_data[,c('X','ID','Attr16',"Attr37")]=NULL
train_data_Imp<-rfImpute(x = train_data[,-63],y=as.factor(as.character(train_data[,63]])),ntree=5,iter=4)
train_data_Imp<-rfImpute(x = train_data[,-63],y=as.factor(as.character(train_data[,63])),ntree=5,iter=4)
library(DMwR)
train_data_Imp<-knnImputation(data = train_data_Imp,k=10,scale=F)
train_data_Imp<-knnImputation(data = train_data,k=10,scale=F)
colSums(train_data_Imp)
colSums(is.na(train_data_Imp))
setwd('C:/Users/Aerow/Desktop/CUTE_3/CUTE_3')
library(randomForest)
library(DMwR)
library(caret)
library(xgboost)
rm(list=ls(all.names = T))
train_data<-read.csv('train.csv')
colSums(is.na(train_data))
na.omit(train_data)
train_nA_omit<-na.omit(train_data)
train_data[,c('ID')]=NULL
View(train_data)
train_data_imp<-centralImputation(train_data)
colSums(is.na(train_data_imp))
train_std<-preProcess(train_data_imp,method = c('center','scale''))
train_data_Imp<-rfImpute(x = train_data[,-63],y=as.factor(as.character(train_data[,63])),ntree=5,iter=4)
train_data_Imp<-knnImputation(data = train_data,k=10,scale=F)
colSums(is.na(train_data_imp))
train_std<-preProcess(train_data_imp,method = c('center','scale'))
train_std<-preProcess(train_data_imp,method = c('center','scale'))
train_std_data<-predict(train_std,train_data_imp)
train_data<-read.csv('train.csv')
train_data[,c('ID',)]=NULL
train_data<-read.csv('train.csv')
train_data[,c('ID',)]=NULL
View(train_data)
rm(list=ls(all.names = T))
train_data<-read.csv('train.csv')
train_data[,c('ID',)]=NULL
train_data[,c('ID')]=NULL
train_data_imp<-centralImputation(train_data)
train_data[,'target']<-ifelse(train_data[,'target']=0,'n','y')
train_data[,'target']<-ifelse(train_data[,'target']==0,'n','y')
train_std<-preProcess(train_data_imp,method = c('center','scale'))
train_std_data<-predict(train_std,train_data_imp)
class(train_std_data[,'target'])
View(train_std_data)
rm(list=ls(all.names = T))
train_data<-read.csv('train.csv')
train_data[,c('ID')]=NULL
train_data_imp<-centralImputation(train_data)
train_data[,'target']<-ifelse(train_data[,'target']==0,'n','y')
View(train_data_imp)
train_data[,'target']<-ifelse(train_data$=0,'n','y')
train_data[,'target']<-ifelse(train_data$target==0,'n','y')
View(train_data_imp)
train_data$target<-ifelse(train_data$target==0,'n','y')
View(train_data_imp)
train_data$target1<-ifelse(train_data$target==0,'n','y')
View(train_data)
View(train_data)
train_data_imp$target<-ifelse(train_data_imp$target==0,'n','y')
View(train_data_imp)
class(train_std_data[,'target'])
train_std<-preProcess(train_data_imp,method = c('center','scale'))
train_std_data<-predict(train_std,train_data_imp)
View(train_std_data)
xgb_tuned_model <- train(x = train_std_data[ , -65],
y = train_std_data[ , 65],
method = "xgbTree",
trControl = sampling_strategy,
tuneGrid = param_grid)
sampling_strategy <- trainControl(method = "repeatedcv", number = 5, repeats = 2, verboseIter = F, allowParallel = T)
param_grid <- expand.grid(.nrounds = 20, .max_depth = c(2, 4, 6), .eta = c(0.1, 0.3),
.gamma = c(0.6, 0.5, 0.3), .colsample_bytree = c(0.6, 0.4),
.min_child_weight = 1, .subsample = c(0.5, 0.6, 0.9))
xgb_tuned_model <- train(x = train_std_data[ , -65],
y = train_std_data[ , 65],
method = "xgbTree",
trControl = sampling_strategy,
tuneGrid = param_grid)
xgb_tuned_model <- train(x = train_std_data[ , -65],
y = train_std_data[ , 65],
method = "xgbTree",
trControl = sampling_strategy,
tuneGrid = param_grid)
read.csv('test.csv')
test_data<-read.csv('test.csv')
test_imp<-knnImputation(data = test_data,k=5)
colSums(test_imp)
colSums(is.na(test_imp))
test_std<-preProcess(test_imp,method=c('center','scale'))
test_final<-predict(test_std,test_imp)
preds<-predict(xgb_tuned_model,test_final)
preds<-as.numeric(preds)
preds<-ifelse(preds==1,0,2)
preds<-ifelse(preds==0,0,1)
preds_p<-data.frame(preds)
preds_p[,2]<-test_data[,'ID']
preds_p[,3]<-seq(1,nrow(test_data),1)
colnames(preds_p)
colnames(preds_p)=c('prediction','ID','dum')
write.table('submission.csv',x = preds_p[c('dum','ID','prediction')],sep = ",",col.names = c('','ID','prediction'))
variable_importance_matrix <- xgb.importance(feature_names = colnames(train_std_data), model = xgb_tuned_model)
variable_importance_matrix <- xgb.importance(feature_names = colnames(train_std_data), model = xgb_tuned_model$finalModel)
xgb.plot.importance(variable_importance_matrix)
variable_importance_matrix$Importance
variable_importance_matrix$Importance>0.02
View(variable_importance_matrix)
variable_importance_matrix[variable_importance_matrix$Importance>0.02,1]
s<-variable_importance_matrix[variable_importance_matrix$Importance>0.02,1]
rm(s)
s<-as,vector(as.character(variable_importance_matrix[variable_importance_matrix$Importance>0.02,1]))
s<-as.vector(as.character(variable_importance_matrix[variable_importance_matrix$Importance>0.02,1]))
sampling_strategy <- trainControl(method = "repeatedcv", number = 5, repeats = 2, verboseIter = F, allowParallel = T)
param_grid <- expand.grid(.nrounds = 20, .max_depth = c(2, 4, 6), .eta = c(0.1, 0.3),
.gamma = c(0.6, 0.5, 0.3), .colsample_bytree = c(0.6, 0.4),
.min_child_weight = 1, .subsample = c(0.5, 0.6, 0.9))
xgb_tuned_model <- train(x = train_std_data[ , -65],
y = train_std_data[ , s],
method = "xgbTree",
trControl = sampling_strategy,
tuneGrid = param_grid)
s
s<-as.vector(variable_importance_matrix[variable_importance_matrix$Importance>0.02,1])
sampling_strategy <- trainControl(method = "repeatedcv", number = 5, repeats = 2, verboseIter = F, allowParallel = T)
param_grid <- expand.grid(.nrounds = 20, .max_depth = c(2, 4, 6), .eta = c(0.1, 0.3),
.gamma = c(0.6, 0.5, 0.3), .colsample_bytree = c(0.6, 0.4),
.min_child_weight = 1, .subsample = c(0.5, 0.6, 0.9))
xgb_tuned_model <- train(x = train_std_data[ , -65],
y = train_std_data[ , s],
method = "xgbTree",
trControl = sampling_strategy,
tuneGrid = param_grid)
s<-as.list(variable_importance_matrix[variable_importance_matrix$Importance>0.02,1])
sampling_strategy <- trainControl(method = "repeatedcv", number = 5, repeats = 2, verboseIter = F, allowParallel = T)
param_grid <- expand.grid(.nrounds = 20, .max_depth = c(2, 4, 6), .eta = c(0.1, 0.3),
.gamma = c(0.6, 0.5, 0.3), .colsample_bytree = c(0.6, 0.4),
.min_child_weight = 1, .subsample = c(0.5, 0.6, 0.9))
xgb_tuned_model <- train(x = train_std_data[ , -65],
y = train_std_data[ , s[[1]]],
method = "xgbTree",
trControl = sampling_strategy,
tuneGrid = param_grid)
View(train_std_data)
sampling_strategy <- trainControl(method = "repeatedcv", number = 5, repeats = 2, verboseIter = F, allowParallel = T)
param_grid <- expand.grid(.nrounds = 20, .max_depth = c(2, 4, 6), .eta = c(0.1, 0.3),
.gamma = c(0.6, 0.5, 0.3), .colsample_bytree = c(0.6, 0.4),
.min_child_weight = 1, .subsample = c(0.5, 0.6, 0.9))
xgb_tuned_model <- train(x = train_std_data[ , s[[1]]],
y = train_std_data[ , 65],
method = "xgbTree",
trControl = sampling_strategy,
tuneGrid = param_grid)
preds<-predict(xgb_tuned_model,test_final)
preds1<-predict(xgb_tuned_model,test_final)
preds<-predict(xgb_tuned_model,test_final[,s[[1]]])
preds<-as.numeric(preds)
preds<-ifelse(preds==0,0,1)
preds<-predict(xgb_tuned_model,test_final[,s[[1]]])
preds<-as.numeric(preds)
preds<-ifelse(preds==1,0,1)
preds_p<-data.frame(preds)
preds_p[,2]<-test_data[,'ID']
preds_p[,3]<-seq(1,nrow(test_data),1)
colnames(preds_p)=c('prediction','ID','dum')
write.table('submission.csv',x = preds_p[c('dum','ID','prediction')],sep = ",",col.names = c('','ID','prediction'))
